"
" Remapping the leader
"
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"

" Automatically indent when adding a curly bracket, etc.
"
set smartindent
set autoindent

" Syntax
"
let python_highlight_all=1
syntax on

" This is the official Python convention
"
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
set smarttab

" Use UTF-8.
"
set encoding=utf-8

" turn on line numbers
"
set number
set numberwidth=5

set nocompatible              " be iMproved, required
set laststatus=2

set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace

filetype off                  " required

" Put backup and temporary files where they don't bother
"
set backupdir=~/.vim/vim-tmp,~/.tmp,~/tmp,~/var/tmp,/tmp
set directory=~/.vim/vim-tmp,~/.tmp,~/tmp,~/var/tmp,/tmp

"  Copy and paste to system clipboard
"
set clipboard=unnamedplus

if has('gui_running')
    set guifont="Bitstream Vera Sans Mono 12"
    set guioptions-=T
    set guioptions-=m
    set guioptions+=e
    set guioptions+=a
    set guitablabel=%M\ %t
    set background=dark
    " colorscheme solarized
else
    set t_Co=256
    " colors zenburn
endif


set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore
set history=1000
set spell
set hidden


" Mapping
"

"
" EASIER FORMATTING OF PARAGRAPHS
"
vmap Q gq
nmap Q gqap

"
" Improved block moves
"
vnoremap < <gv
vnoremap > >gv

" Automatically jump to end of text you pasted
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" In visual mode C-r gets the selected text and ofers replace
"
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" I never want regular Visual mode
"
nnoremap    v   <C-V>
nnoremap <C-V>     v
vnoremap    v   <C-V>
vnoremap <C-V>     v

" Quickfix navigation
"
nmap <C-j> :cn<CR>
nmap <C-k> :cp<CR>

" Square up visual selections...
set virtualedit=block

" Make BS/DEL work as expected in visual modes (i.e. delete the selected text)...
vmap <BS> x

" Make vaa select the entire file...
vmap aa VGo1G

"  Disable highlight when <leader><cr> is presed
"
map <silent> <leader><cr> :noh<cr>

" How many times
"
nmap <leader>s :%s///g<LEFT><LEFT><LEFT>
vmap <leader>s :s///g<LEFT><LEFT><LEFT>
nmap <leader>t :%s/ *$//g<cr>
vmap <leader>t :s/ *$//g<cr>

" Code folding options
"
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>


" Added by Tim to map alt-left/right to flip through buffers
"
if has('gui_running')
	nmap <A-h> :bp<CR>
	nmap <A-l> :bn<CR>
else
	nmap <Esc>h :bp<cr>
	nmap <Esc>l :bn<cr>
endif

" Function Keys Mappings
"
" NERDTree
"
map <F2> :NERDTreeToggle<cr>

" NERD Tree to open automatically whenever you fire Vim or open a new buffer. Add these lines to /etc/vim/vimrc or ~/.vimrc:

"
" NERDCommenter
"
map <F4> <leader>c<space><cr>

"
" F5 to list buffers and choose one
"
:nnoremap <F5> :buffers<CR>:buffer<Space>

" Functions {

" Vertical Split Buffer Function
" http://stackoverflow.com/questions/4571494/open-a-buffer-as-a-vertical-split-in-vim
function VerticalSplitBuffer(buffer)
    execute "vert belowright sb" a:buffer
endfunction

" Vertical Split Buffer Mapping
command -nargs=1 Vbuffer call VerticalSplitBuffer(<f-args>)

" PLUG
"
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'Rykka/riv.vim'                    " RST plugin
Plug 'Valloric/YouCompleteMe'           " Better completion
Plug 'airblade/vim-gitgutter'           " See git changes
Plug 'arcticicestudio/nord-vim', { 'branch': 'develop' }         " Nord colorscheme
Plug 'dsummersl/wikia-csv'              " CSV plugin
Plug 'easymotion/vim-easymotion'        " Help moving arround
Plug 'ekalinin/Dockerfile.vim'          " Help on docker files
Plug 'itchyny/lightline.vim'            " Fancy powerline
Plug 'ambv/black'                       " Python Code by the law
Plug 'kien/ctrlp.vim'                   " Super search
Plug 'myusuf3/numbers.vim'              " Fancy numbers
Plug 'nvie/vim-flake8'                  " R you pythonic enough?
Plug 'scrooloose/nerdcommenter'         " Easy comments
Plug 'scrooloose/nerdtree'              " Fancy file explorer
Plug 'tmhedberg/SimpylFold'             " Better folding
Plug 'tpope/vim-surround'               " Vim surrounds
Plug 'vim-scripts/indentpython.vim'     " Help with Python indent
Plug 'vim-syntastic/syntastic'          " Syntax checking
Plug 'vimwiki/vimwiki'                  " VimWiki
Plug 'zivyangll/git-blame.vim'          " Git blame on your fingertips

" Initialize plugin system
call plug#end()

colorscheme nord
let g:nord_comment_brightness = 30

let g:rehash256 = 1

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Plugin config
"

" VimWiki
"
let wiki_1 = {}
let wiki_1.path = '~/Documents/doc/vimwiki/work/'
let wiki_1.syntax = 'default'

let wiki_2 = {}
let wiki_2.path = '~/Documents/doc/vimwiki/personal/'
let wiki_2.syntax = 'default'
let wiki_2.auto_toc = 1
let wiki_2.auto_export = 1

let g:vimwiki_list = [wiki_1, wiki_2]

" Flake-8
"
let g:flake8_show_in_gutter=1  " show

" Black
"
let g:black_skip_string_normalization=1

" Nerd plugins
"
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
"
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1

" CSV Plugin Config
"
autocmd BufNewFile,BufRead *.csv setf csv
autocmd BufNewFile,BufRead *.tsv setf csv
autocmd BufNewFile,BufRead *.tsv Delimiter \t
autocmd BufNewFile,BufRead *.tsv setlocal ts=20 sw=25
autocmd BufNewFile,BufReadPre *.rst set cc=80 tw=79

" Git Blame
"
nnoremap <leader>b :<C-u>call gitblame#echo()<CR>

" You complete me
"
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" For XML syntax
"
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

" For Python
"
au FileType py setlocal foldmethod=indent
au BufNewFile,BufRead *.py set textwidth=120
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix

" For Frontend
"
au BufNewFile,BufRead *.js, *.html, *.css set tabstop=2
au BufNewFile,BufRead *.js, *.html, *.css set softtabstop=2
au BufNewFile,BufRead *.js, *.html, *.css set shiftwidth=2

" Syntastic Config
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['python/python3']
