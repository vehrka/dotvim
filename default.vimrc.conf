" PLUG {{{
"
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let need_to_install_plugins = 1
endif

call plug#begin()
Plug 'ekalinin/Dockerfile.vim'            " Help on docker files
Plug 'tmhedberg/SimpylFold'               " Better folding
Plug 'vim-scripts/The-NERD-tree'          " Fancy file explorer
" cd ~/.vim/plugged/YouCompleteMe
" " python3 install.py --clang-completer
Plug 'ycm-core/YouCompleteMe'             " Better completion
" You may need to do this if Black brokes:: rm -rf .vim/black
Plug 'psf/black', { 'branch': 'master' }  " Python Code by the law
Plug 'junegunn/fzf',  { 'dir': '~/.fzf' } " Fuzzy search of content
Plug 'junegunn/fzf.vim'                   " Fuzzy search of content common tips
Plug 'zivyangll/git-blame.vim'            " Git blame on your fingertips
Plug 'morhetz/gruvbox'                    " A good theme
Plug 'sjl/gundo.vim'                      " Undo on steroids
Plug 'vim-scripts/indentpython.vim'       " Help with Python indent
Plug 'itchyny/lightline.vim'              " Fancy powerline
Plug 'scrooloose/nerdcommenter'           " Easy comments
Plug 'myusuf3/numbers.vim'                " Fancy numbers
Plug 'kien/rainbow_parentheses.vim'       " Rainbow Parentheses
Plug 'vim-syntastic/syntastic'            " Syntax checking
Plug 'majutsushi/tagbar'                  " TagBar plugin
Plug 'SirVer/ultisnips'                   " Snippet Engine
Plug 'easymotion/vim-easymotion'          " Help moving arround
Plug 'nvie/vim-flake8'                    " R you pythonic enough?
Plug 'airblade/vim-gitgutter'             " See git changes
Plug 'honza/vim-snippets'                 " Snippets for vim
Plug 'tpope/vim-surround'                 " Vim surrounds
Plug 'vimwiki/vimwiki'                    " VimWiki
Plug 'dsummersl/wikia-csv'                " CSV plugin
" Initialize plugin system
call plug#end()

filetype plugin indent on    " required
syntax on

if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" }}}

" Remapping the leader {{{
"
let mapleader = "\<Space>"
let g:mapleader = "\<Space>"
" }}}

" Indentation {{{
"
set smartindent
set autoindent
" }}}

" Python Syntax {{{
"
let python_highlight_all=1

" This is the official Python convention
"
set tabstop=4
set softtabstop=4
set shiftwidth=4
set colorcolumn=120
set shiftround
set expandtab
set smarttab
set viminfo='25,\"50,n~/.viminfo
" }}}

" Misc settings {{{
" Find recursively
set path+=**
" Use UTF-8.
"
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8
" turn on line numbers
"
set number
set numberwidth=5
set nocompatible                " be iMproved, required
set laststatus=2                " always show the status bar
set t_Co=256                    " enable 256 colors
set backspace=indent,eol,start  " Backspace for dummies
set linespace=0                 " No extra spaces between rows
set showmatch                   " Show matching brackets/parenthesis
set incsearch                   " Find as you type search
set hlsearch                    " Highlight search terms
set winminheight=0              " Windows can be 0 line high
set ignorecase                  " Case insensitive search
set smartcase                   " Case sensitive when uc present
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.
set whichwrap=b,s,h,l,<,>,[,]   " Backspace and cursor keys wrap too
set scrolljump=5                " Lines to scroll when cursor leaves screen
set scrolloff=3                 " Minimum lines to keep above and below cursor
set foldenable                  " Auto fold code
set modelines=1                 " Check for folding instructions at the end of the file
set list
set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
set splitbelow                  " Open splits below
set splitright                  " Open splits to the right
filetype off                  " required

" Put backup and temporary files where they don't bother
"
set backupdir=~/.vim/vim-tmp,~/.tmp,~/tmp,~/var/tmp,/tmp
set directory=~/.vim/vim-tmp,~/.tmp,~/tmp,~/var/tmp,/tmp

"  Copy and paste to system clipboard
"
set clipboard=unnamedplus


" Color
set background=dark
set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash " Better Unix / Windows compatibility
set virtualedit=onemore
set history=1000
set spell
set hidden

" Square up visual selections...
set virtualedit=block

" Grep configurationset 
set grepprg=ack

" }}}

" Mouse {{{
"
set mouse=a
let g:is_mouse_enabled = 1
noremap <silent> <Leader>m :call ToggleMouse()<CR>
function ToggleMouse()
    if g:is_mouse_enabled == 1
        echo "Mouse OFF"
        set mouse=
        let g:is_mouse_enabled = 0
    else
        echo "Mouse ON"
        set mouse=a
        let g:is_mouse_enabled = 1
    endif
endfunction
" }}}

" Colorscheme {{{
syntax on
colorscheme gruvbox
filetype on
filetype plugin indent on
set noshowmode
let g:lightline = { 'colorscheme': 'gruvbox' }
" }}}

" Mappings {{{
" EASIER FORMATTING OF PARAGRAPHS
"
vmap Q gq
nmap Q gqap
" Improved block moves
"
vnoremap < <gv
vnoremap > >gv
" Automatically jump to end of text you pasted
"
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
" In visual mode C-r gets the selected text and ofers replace
"
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>
" I never want regular Visual mode
"
nnoremap    v   <C-V>
nnoremap <C-V>     v
vnoremap    v   <C-V>
vnoremap <C-V>     v
" Quickfix navigation
"
nmap <C-j> :cn<CR>
nmap <C-k> :cp<CR>
" Make BS/DEL work as expected in visual modes (i.e. delete the selected text)...
vmap <BS> x
" Make vaa select the entire file...
vmap aa VGo1G
"  Disable highlight when <leader><cr> is presed
"
map <silent> <leader><cr> :noh<cr>
" Indent/unindent with tab/shift-tab
"
nmap <Tab> >>
imap <S-Tab> <Esc><<i
nmap <S-Tab> <<
" move through split windows
"
nmap <leader><Up> :wincmd k<CR>
nmap <leader><Down> :wincmd j<CR>
nmap <leader><Left> :wincmd h<CR>
nmap <leader><Right> :wincmd l<CR>
" How many times
"
nmap <leader>s :%s///g<LEFT><LEFT><LEFT>
vmap <leader>s :s///g<LEFT><LEFT><LEFT>
nmap <leader>t :%s/ *$//g<cr>
vmap <leader>t :s/ *$//g<cr>
" Code folding options
"
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>
" Added by Tim to map alt-left/right to flip through buffers
"
if has('gui_running')
    nmap <A-h> :bp<CR>
    nmap <A-l> :bn<CR>
else
    nmap <Esc>h :bp<cr>
    nmap <Esc>l :bn<cr>
endif
" Function Keys Mappings
" NERDTree
"
let NERDTreeIgnore=['\.pyc$', '__pycache__']
map <F2> :NERDTreeToggle<cr>
" TagBar
"
map <F3> :TagbarToggle<cr>
" NERDCommenter
"
map <F4> <leader>c<space><cr>
" F5 to list buffers and choose one
"
:nnoremap <F5> :buffers<CR>:buffer<Space>
" FZF
"
" SEARCH files
map <Leader>p :Files<CR>
" SEARCH buffers
map <Leader>b :Buffers<CR>
" SEARCH in current file
map <Leader>f :Rg<CR>
" }}}

" Functions {{{
" Vertical Split Buffer Function
" http://stackoverflow.com/questions/4571494/open-a-buffer-as-a-vertical-split-in-vim
function VerticalSplitBuffer(buffer)
    execute "vert belowright sb" a:buffer
endfunction
" Vertical Split Buffer Mapping
command -nargs=1 Vbuffer call VerticalSplitBuffer(<f-args>)
" }}}

" Plugin config {{{
"
" VimWiki
"
let wiki_1 = {}
let wiki_1.path = '~/Documents/doc/vimwiki/work/'
let wiki_1.syntax = 'markdown'
let wiki_1.ext = '.md'
let wiki_1.auto_toc = 1
let wiki_2 = {}
let wiki_2.path = '~/Documents/doc/vimwiki/personal/'
let wiki_2.syntax = 'markdown'
let wiki_2.ext = '.md'
let wiki_2.auto_toc = 1
let wiki_2.auto_export = 1
let g:vimwiki_list = [wiki_1, wiki_2]
"
" Flake-8
"
let g:flake8_show_in_gutter=1  " show
"
" Black
"
let g:black_skip_string_normalization = 1
" Nerd plugins
"
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
"
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1
" CSV Plugin Config
"
autocmd BufNewFile,BufRead *.csv setf csv
autocmd BufNewFile,BufRead *.tsv setf csv
autocmd BufNewFile,BufRead *.tsv Delimiter \t
autocmd BufNewFile,BufRead *.tsv setlocal ts=20 sw=25
autocmd BufNewFile,BufReadPre *.rst set cc=120 tw=120
" Git Blame
"
nnoremap <leader>gb :<C-u>call gitblame#echo()<CR>
" You complete me
"
let g:ycm_autoclose_preview_window_after_completion=1
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>
" Gundo
"
nnoremap <leader>u :GundoToggle<CR>
if has('python3')
    let g:gundo_prefer_python3 = 1
endif
" Rainbow Parenthese
"
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
" Snippets
"
let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-g>"
let g:UltiSnips_python_style="google"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" }}}

" Autocommands {{{
"
" restore place in file from previous session
"
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
" disable autoindent when pasting text
" source: https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
" For XML syntax
"
let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax
" For Python
"
au FileType py setlocal foldmethod=indent
au BufNewFile,BufRead *.py set textwidth=120
au BufNewFile,BufRead *.py set autoindent
au BufNewFile,BufRead *.py set fileformat=unix
" For Markdown
"
function MarkdownLevel()
    if getline(v:lnum) =~ '^# .*$'
        return ">1"
    endif
    if getline(v:lnum) =~ '^## .*$'
        return ">2"
    endif
    if getline(v:lnum) =~ '^### .*$'
        return ">3"
    endif
    if getline(v:lnum) =~ '^#### .*$'
        return ">4"
    endif
    if getline(v:lnum) =~ '^##### .*$'
        return ">5"
    endif
    if getline(v:lnum) =~ '^###### .*$'
        return ">6"
    endif
    return "="
endfunction
au BufEnter *.md setlocal foldexpr=MarkdownLevel()
au BufEnter *.md setlocal foldmethod=expr
au BufNewFile,BufRead *.md set textwidth=120
au BufNewFile,BufRead *.md set autoindent
au BufNewFile,BufRead *.md set fileformat=unix
" For Frontend
"
au BufNewFile,BufRead *.js, *.html, *.css set tabstop=2
au BufNewFile,BufRead *.js, *.html, *.css set softtabstop=2
au BufNewFile,BufRead *.js, *.html, *.css set shiftwidth=2
" Rainbow Parentheses
"
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
" Sudo tee trick
"
ca w!! w !sudo tee >/dev/null "%"
" }}}

" Syntastic Config {{{
"
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['python/python3']
" }}}

" vim:foldmethod=marker:foldlevel=0
